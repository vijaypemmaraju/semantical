---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";

import { GET } from "./word.json";
---

<script>
  import ForceGraph, { type ForceGraphInstance } from "force-graph";
  import ky from "ky";
  let word = "human";
  let nodes: { id: string }[] = [];
  let links: { source: string; target: string }[] = [];
  let Graph: ForceGraphInstance;
  let lock = false;
  const onNodeClick = (node: any) => {
    if (lock) return;
    lock = true;
    Graph.centerAt(node.x, node.y, 1000);
    const temp = node.id;
    node.loading = true;
    fetch(`./word.json?word=${temp}`)
      .then((res) => res.json())
      .then((data) => {
        node.loading = false;
        data.words.forEach((word: string) => {
          const newNode = { id: word };
          nodes.push(newNode);
        });
        // dedupe
        nodes = nodes.filter(
          (node, index, self) =>
            self.findIndex((n) => n.id === node.id) === index
        );
        // add links
        links = links.concat(
          data.words.map((word: string) => ({ source: node.id, target: word }))
        );

        Graph.graphData({
          nodes,
          links,
        });
        lock = false;
      });
  };

  interface NodeObject {
    id: string;
    loading?: boolean;
    hover?: boolean;
  }

  ky.get("./word.json", { searchParams: { word: word } })
    .then((res) => res.json<{ words: string[] }>())
    .then((data) => {
      console.log(data);
      nodes = data.words.map((word) => ({ id: word }));
      links = nodes.map((node) => ({ source: word, target: node.id }));
      nodes.push({ id: word });
      console.log(nodes);
      Graph = ForceGraph()(document.getElementById("graph")!)
        .graphData({
          nodes,
          links,
        })
        .nodeId("id")
        .nodeAutoColorBy("id")
        .nodeCanvasObject((node: any, ctx, globalScale) => {
          const label = node.id;
          const fontSize = 18;
          ctx.font = `${fontSize}px Sans-Serif`;
          const textWidth = ctx.measureText(label).width;
          const bckgDimensions = [textWidth, fontSize].map(
            (n) => n + fontSize * 0.8
          ); // some padding

          if (node.hover) {
            ctx.fillStyle = "rgba(255, 255, 255, 0.2)";
          } else {
            ctx.fillStyle = "rgba(255, 255, 255, 0.1)";
          }
          ctx.fillRect(
            node.x! - bckgDimensions[0] / 2,
            node.y! - bckgDimensions[1] / 2,
            bckgDimensions[0],
            bckgDimensions[1]
          );

          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.fillStyle = node.color;
          if (node.loading) {
            const currentTime = Date.now();
            ctx.beginPath();
            ctx.arc(node.x, node.y, 5, (currentTime / 100) % (2 * Math.PI), (currentTime / 100) % (2 * Math.PI) + Math.PI);
            ctx.strokeStyle = "white";
            ctx.lineWidth = 2;
            ctx.stroke();
            ctx.closePath();
          } else {
            ctx.fillText(label, node.x, node.y);

          }

          node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint
        })
        .onNodeClick(onNodeClick)
        .linkWidth(10)
        .linkCurvature(0.25)
        // .d3AlphaDecay(0)
        // .d3VelocityDecay(0.9)
        // .enableNodeDrag(false)
        .onNodeHover((node: any, previousNode: any) => {
          if (node) {
            node.hover = true;
          }
          if (previousNode) {
            previousNode.hover = false;
          }
        })
        .onNodeDragEnd((node, translate) => {
          console.log(node, translate);
          // if translate is small enough, consider it a click
          if (Math.abs(translate.x) < 10 && Math.abs(translate.y) < 10) {
            onNodeClick(node);
          }
        })
        .linkCanvasObjectMode(() => "after")
        .nodePointerAreaPaint((node: any, color, ctx) => {
          ctx.fillStyle = color;
          const bckgDimensions = node.__bckgDimensions;
          bckgDimensions &&
            ctx.fillRect(
              node.x - bckgDimensions[0] / 2,
              node.y - bckgDimensions[1] / 2,
              bckgDimensions[0],
              bckgDimensions[1]
            );
        });

      Graph.d3Force("link")?.distance(() => {
        return 125;
      });
      Graph.d3Force("charge")!.strength(-100);
      Graph.d3Force("center", null);

      // fit to canvas when engine stops
      Graph.onEngineStop(() => Graph.zoomToFit(400));
    });
</script>

<Layout title="Sementical, a word association game">
  <main>
    <div id="graph"></div>
  </main>

  <style>
    main {
      margin: auto;
      padding: 1rem;
      width: 100vw;
      height: 100vh;
      color: white;
      font-size: 20px;
      line-height: 1.6;
    }
  </style>
</Layout>
