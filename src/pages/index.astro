---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";

import { GET } from "./word.json";
---

<script>
  import ForceGraph from "force-graph";
  import ky from "ky";
  let word = "human";
  let nodes: { id: string }[] = [];
  let links: { source: string; target: string }[] = [];
  let Graph;
  ky.get("./word.json", { searchParams: { word: word } })
    .then((res) => res.json())
    .then((data) => {
      console.log(data);
      nodes = data.words.map((word) => ({ id: word }));
      links = nodes.map((node) => ({ source: word, target: node.id }));
      nodes.push({ id: word });
      console.log(nodes);
      Graph = ForceGraph()(document.getElementById("graph"))
        .graphData({
          nodes,
          links,
        })
        .nodeId("id")
        .nodeAutoColorBy("id")
        .nodeCanvasObject((node, ctx, globalScale) => {
          const label = node.id;
          const fontSize = 18;
          ctx.font = `${fontSize}px Sans-Serif`;
          const textWidth = ctx.measureText(label).width;
          const bckgDimensions = [textWidth, fontSize].map(
            (n) => n + fontSize * 0.8
          ); // some padding

          ctx.fillStyle = "rgba(255, 255, 255, 0.1)";
          ctx.fillRect(
            node.x - bckgDimensions[0] / 2,
            node.y - bckgDimensions[1] / 2,
            ...bckgDimensions
          );

          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.fillStyle = node.color;
          ctx.fillText(label, node.x, node.y);

          node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint
        })
        .onNodeClick((node) => {
					Graph.centerAt(node.x, node.y, 1000);
					const temp = node.id
					node.id = '<loading>'
          fetch(`./word.json?word=${temp}`)
            .then((res) => res.json())
            .then((data) => {
							node.id = temp;
              data.words.forEach((word) => {
                nodes.push({ id: word });
              });
              // dedupe
              nodes = nodes.filter(
                (node, index, self) =>
                  self.findIndex((n) => n.id === node.id) === index
              );
              // add links
              links = links.concat(
                data.words.map((word) => ({ source: node.id, target: word }))
              );

              Graph.graphData({
                nodes,
                links,
              });
            });
        })
        .linkWidth(10)
        .linkCurvature(0.25)
  // .d3AlphaDecay(0)
  // .d3VelocityDecay(0.9)
	.enableNodeDrag(false)
  .linkCanvasObjectMode(() => "after")
        .nodePointerAreaPaint((node, color, ctx) => {
          ctx.fillStyle = color;
          const bckgDimensions = node.__bckgDimensions;
          bckgDimensions &&
            ctx.fillRect(
              node.x - bckgDimensions[0] / 2,
              node.y - bckgDimensions[1] / 2,
              ...bckgDimensions
            );
        });

      Graph.d3Force("link")?.distance((link: LinkType) => {
        return 125;
      });
			Graph.d3Force("charge")!.strength(-100);
			Graph.d3Force('center', null);

// fit to canvas when engine stops
Graph.onEngineStop(() => Graph.zoomToFit(400));
    });
</script>

<Layout title="Welcome to Astro.">
  <main>
    <div id="graph"></div>
  </main>

  <style>
    main {
      margin: auto;
      padding: 1rem;
      width: 100vw;
      height: 100vh;
      color: white;
      font-size: 20px;
      line-height: 1.6;
    }
  </style>
</Layout>
