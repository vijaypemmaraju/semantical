---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";

import { GET } from "./word.json";
---

<script>
  import ForceGraph, { type ForceGraphInstance } from "force-graph";
  import ky from "ky";
  import copy from "copy-to-clipboard";

  const [word, goal] = await ky.get("./start.json", { timeout: 3000 }).json<string[]>();
  document.getElementById("goal")!.innerText = `Find ${goal}`;
  let nodes: { id: string }[] = [];
  let links: { source: string; target: string }[] = [];
  let Graph: ForceGraphInstance;
  let lock = false;
  let clicks = 0;
  let won = false;
  const onNodeClick = async (node: any) => {
    node.clicked = true;
    Graph.centerAt(node.x, node.y, 1000);
    const temp = node.id;
    node.loading = true;
    if (lock) {
      await new Promise((resolve) => {
        const interval = setInterval(() => {
          if (!lock) {
            clearInterval(interval);
            resolve(null);
          }
        }, 100);
      });
    }
    lock = true;
    clicks++;
    let data;
    try {
      data = await ky.get(`./word.json?word=${temp}`, { timeout: 1000, retry: 3 }).json<{
        words: string[];
      }>();
    } catch (e) {
      console.error(e);
      node.loading = false;
      lock = false;
      return [];
    }
    node.loading = false;
    let newNodes: { id: string }[] = [];
    data.words.forEach((word: string) => {
      const newNode = { id: word };
      newNodes.push(newNode);
      nodes.push(newNode);
    });
    // dedupe
    nodes = nodes.filter(
      (node, index, self) => self.findIndex((n) => n.id === node.id) === index
    );
    // add links
    links = links.concat(
      data.words.map((word: string) => ({ source: node.id, target: word }))
    );
    if (nodes.find((n) => n.id === goal && !won)) {
      won = true;
      const dialog = document.getElementById("dialog") as HTMLDialogElement;
      dialog.showModal();
      document.getElementById("info")!.innerText =
        `You found ${goal} in ${clicks} clicks!`;
      // document.getElementById("share")!.addEventListener("click", () => {
      //   let text = `semantical.fun - ${clicks} clicks`;
      //   if (navigator.share) {
      //     navigator.share({
      //       title: "I found the word!",
      //       text,
      //       url: window.location.href,
      //     });
      //   } else {
      //     copy(text);
      //     alert("copied to clipboard!");
      //   }
      // });
    }
    Graph.graphData({
      nodes,
      links,
    });
    lock = false;

    return newNodes;
  };

  interface NodeObject {
    id: string;
    loading?: boolean;
    hover?: boolean;
  }

  const nodesById: { [id: string]: NodeObject } = {};

  ky.get("./word.json", { searchParams: { word: word }, timeout: 1000, retry: 3 })
    .then((res) => res.json<{ words: string[] }>())
    .then((data) => {
      nodes = data.words.map((word) => ({ id: word }));
      links = nodes.map((node) => ({ source: word, target: node.id }));
      nodes.push({ id: word });
      nodes = nodes.filter(
        (node, index, self) => self.findIndex((n) => n.id === node.id) === index
      );
      Graph = ForceGraph()(document.getElementById("graph")!)
        .graphData({
          nodes,
          links,
        })
        .nodeId("id")
        .nodeAutoColorBy("id")
        .nodeCanvasObject((node: any, ctx, globalScale) => {
          const label = node.id;
          const fontSize = 18;
          ctx.font = `${fontSize}px Sans-Serif`;
          const textWidth = ctx.measureText(label).width;
          const bckgDimensions = [textWidth, fontSize].map(
            (n) => n + fontSize * 0.8
          ); // some padding

          if (node.hover) {
            ctx.fillStyle = "rgba(255, 255, 255, 0.2)";
          } else {
            ctx.fillStyle = "rgba(50, 50, 50, 0.8)";
          }
          ctx.fillRect(
            node.x! - bckgDimensions[0] / 2,
            node.y! - bckgDimensions[1] / 2,
            bckgDimensions[0],
            bckgDimensions[1]
          );
          // draw border around rect
          if (node.id === goal) {
            ctx.strokeStyle = "rgba(255, 215, 0, 0.8)";
          } else if (node.id === word) {
            ctx.strokeStyle = "rgba(55, 255, 55, 0.8)";
          } else {
            ctx.strokeStyle = "rgba(255, 255, 255, 0.2)";
          }
          ctx.strokeRect(
            node.x! - bckgDimensions[0] / 2,
            node.y! - bckgDimensions[1] / 2,
            bckgDimensions[0],
            bckgDimensions[1]
          );

          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.fillStyle = node.clicked ? 'rgba(138, 128, 128, 0.8)' : node.color;
          if (node.loading) {
            const currentTime = Date.now();
            ctx.beginPath();
            ctx.arc(
              node.x,
              node.y,
              5,
              (currentTime / 100) % (2 * Math.PI),
              ((currentTime / 100) % (2 * Math.PI)) + Math.PI
            );
            ctx.strokeStyle = "white";
            ctx.lineWidth = 2;
            ctx.stroke();
            ctx.closePath();
          } else {
            ctx.fillText(label, node.x, node.y);
          }
          nodesById[node.id] = node;
          node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint
        })
        .onNodeClick(onNodeClick)
        .linkWidth(6)
        .zoom(/* check mobile */ window.innerWidth < 600 ? 1.5 : 1)
        .linkColor(() => "rgba(128, 128, 256, 0.2)")
        .linkDirectionalParticles(2)
        .linkCurvature(0.25)
        // .d3AlphaDecay(0)
        // .d3VelocityDecay(0.9)
        // .enableNodeDrag(false)
        .onNodeHover((node: any, previousNode: any) => {
          if (node) {
            node.hover = true;
          }
          if (previousNode) {
            previousNode.hover = false;
          }
        })
        .onNodeDragEnd((node, translate) => {
          console.log(node, translate);
          // if translate is small enough, consider it a click
          if (Math.abs(translate.x) < 10 && Math.abs(translate.y) < 10) {
            onNodeClick(node);
          }
        })
        .linkCanvasObjectMode(() => "after")
        .nodePointerAreaPaint((node: any, color, ctx) => {
          ctx.fillStyle = color;
          const bckgDimensions = node.__bckgDimensions;
          bckgDimensions &&
            ctx.fillRect(
              node.x - bckgDimensions[0] / 2,
              node.y - bckgDimensions[1] / 2,
              bckgDimensions[0],
              bckgDimensions[1]
            );
        });

      Graph.d3Force("link")?.distance(() => {
        return 125;
      });
      Graph.d3Force("charge")!.strength(-100);
      Graph.d3Force("center", null);
    });

  // perform a BFS to get the graph
  const bfs = () => {
    setTimeout(async () => {
      let visited = new Set<string>();
      let current = nodesById[word];
      let queue = [current];
      while (queue.length > 0) {
        current = queue.shift()!;
        console.log(current);
        if (visited.has(current.id)) {
          continue;
        }
        visited.add(current.id);
        const newNodes = await onNodeClick(current);
        console.log("newNodes", newNodes);
        await new Promise((resolve) => {
          setTimeout(async () => {
            for (let node of newNodes) {
              let nodeById = nodesById[node.id];
              while (!nodeById) {
                nodeById = nodesById[node.id];
                await new Promise((resolve) => {
                  setTimeout(() => {
                    resolve(null);
                  }, 100);
                });
              }
              queue.push(nodeById);
            }
            resolve(null);
          }, 0);
        });
      }
    }, 5000);
  };
  (window as any).bfs = bfs;
  // bfs();
</script>

<Layout title="Semantical">
  <main>
    <h1 id="goal"></h1>
    <div id="graph"></div>
    <dialog id="dialog" class="modal">
      <div class="modal-box">
        <h3 class="font-bold text-lg">You win!</h3>
        <p id="info" class="py-4"></p>
        <div class="modal-action">
          <form method="dialog">
            <!-- <button id="share" class="btn">Share</button> -->
            <!-- if there is a button in form, it will close the modal -->
            <button class="btn">Close</button>
          </form>
        </div>
      </div>
    </dialog>
  </main>

  <style>
    main {
      margin: auto;
      padding: 1rem;
      width: 100vw;
      height: 100vh;
      color: white;
      font-size: 20px;
      line-height: 1.6;
    }
  </style>
</Layout>
